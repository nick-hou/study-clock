{"version":3,"sources":["components/Control.js","components/Display.js","components/Clock.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Control","props","className","name","onClick","decrease","time","increase","Display","startClock","activity","destination","Date","getTime","window","clockRefresh","setInterval","remainder","Math","round","setCountdownTime","clearInterval","switchClock","updateClock","console","log","setActivity","breakLength","sessionLength","id","floor","countdownTime","abs","e","paused","setPaused","Clock","useState","setBreakLength","setSessionLength","max","Footer","target","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.024e7829.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Control = props => {\n  return (\n    <div className={props.className}>\n      <h2>{props.name} Length</h2>\n      <div className=\"row btnRow\">\n        <h3\n          onClick={props.decrease}\n        >\n        <i className=\"fas fa-arrow-down\"></i>\n        </h3>\n\n        <h3\n          className=\"timeLength\"\n        >\n        {props.time}\n        </h3>\n\n        <h3\n          onClick={props.increase}\n        >\n        <i className=\"fas fa-arrow-up\"></i>\n        </h3>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\n\nexport const Display = props => {\n\n  const play = e => {\n    if(props.paused) {\n      props.setPaused(false);\n      // restart timer\n      startClock(props.countdownTime, props.activity)\n    }\n  }\n\n  const pause = e => {\n    props.setPaused(true);\n    // stop timer\n    clearInterval(window.clockRefresh)\n  }\n\n  const refresh = e => {\n    // pause\n    props.setPaused(true);\n    clearInterval(window.clockRefresh)\n    // reset to study\n    props.setActivity('Study');\n    // reset countdown to sessionLength\n    props.setCountdownTime(60*props.sessionLength)\n  }\n\n  function updateClock(destination, activity) {\n    const remainder = Math.round(destination - (new Date().getTime())/1000)\n    props.setCountdownTime(remainder)\n    if(remainder <= 0) {\n      clearInterval(window.clockRefresh)\n      switchClock(activity)\n    }\n  }\n\n  function startClock(time, activity) {\n    const now = (new Date().getTime())/1000; // current time in seconds\n    const destination = now + time\n    window.clockRefresh = setInterval(() => updateClock(destination, activity), 1000)\n  }\n\n\n  const switchClock = activity => {\n    console.log(activity)\n    if(activity === 'Study') {\n      props.setActivity('Break')\n      props.setCountdownTime(60*props.breakLength)\n      startClock(60*props.breakLength, 'Break')\n    }\n    else if(activity === 'Break') { // activity == 'break'\n      // clearInterval(window.clockRefresh)\n      props.setActivity('Study')\n      props.setCountdownTime(60*props.sessionLength)\n      startClock(60*props.sessionLength, 'Study')\n    }\n  }\n\n  return (\n    <div id=\"display\">\n      <div className=\"countdownDisplay\">\n        <h3>{props.activity}</h3>\n        <h1>\n          {Math.floor(props.countdownTime/60)}\n          :\n          {\n            ( // if less than 10 seconds, append a 0 to the front\n              (props.countdownTime%60 < 10)\n              ? '0'\n              : ''\n            )\n            +\n            // Remove negative sign when timer hits 0. Beacause of compute time the actual countdown time will be a very small negative number when it should be 0\n            Math.abs(Math.round(props.countdownTime%60))\n          }\n        </h1>\n      </div>\n      <div className=\"row btnRow\">\n        <h3 onClick={play}><i className=\"fas fa-play\"></i></h3>\n        <h3 onClick={pause}><i className=\"fas fa-pause\"></i></h3>\n        <h3 onClick={refresh}><i className=\"fas fa-redo\"></i></h3>\n      </div>\n    </div>\n  )\n}\n","import './clock.css'\nimport React, { useState } from 'react';\nimport { Control } from './Control';\nimport { Display } from './Display';\n\nexport const Clock = () => {\n\n  const [breakLength, setBreakLength] = useState(5);\n  const [sessionLength, setSessionLength] = useState(25);\n  // Store pause/activity state for CSS control, even though the state is set in the display component\n  const [paused, setPaused] = useState(true);\n  const [activity, setActivity] = useState('Study');\n  // Similarly, store the countdown time here for arrow control\n  const [countdownTime, setCountdownTime] = useState(60*sessionLength)\n\n  const increaseBreakLength = e => setBreakLength(breakLength + 1);\n  const decreaseBreakLength = e => setBreakLength(Math.max(0, breakLength - 1));\n  // adjust session and countdown times independently because of setState's async nature\n  const increaseSessionLength = e => {\n    setSessionLength(sessionLength + 1)\n    setCountdownTime(countdownTime + 60)\n  }\n  const decreaseSessionLength = e => {\n    setSessionLength(Math.max(0, sessionLength - 1))\n    setCountdownTime(Math.max(0, countdownTime - 60))\n  }\n\n\n  return(\n    <div\n      id=\"clock\"\n      className={\n        // three class names: paused, study, and break\n        \"container clock-\"\n        + (paused\n          ? 'paused'\n          : (activity==='Study'\n            ? 'study'\n            : 'break'\n          )\n        )\n      }\n    >\n      <h1>Study Clock</h1>\n      <br /><br />\n      <div className=\"row control-row\">\n        <Control\n          className=\"col-sm-6 col-xs-12\"\n          name='Break'\n          time={breakLength}\n          increase={increaseBreakLength}\n          decrease={decreaseBreakLength}\n        />\n\n        <Control\n          className=\"col-sm-6 col-xs-12\"\n          name='Sesson'\n          time={sessionLength}\n          increase={increaseSessionLength}\n          decrease={decreaseSessionLength}\n        />\n      </div>\n      <br /><br />\n      <Display\n        paused={paused}\n        setPaused={setPaused}\n        activity={activity}\n        setActivity={setActivity}\n        sessionLength={sessionLength}\n        breakLength={breakLength}\n        countdownTime={countdownTime}\n        setCountdownTime={setCountdownTime}\n      />\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const Footer = () => {\n  return (\n    <div>\n      Built by <a target=\"blank\" href=\"https://nicholashou.com\">Nick Hou</a>\n    </div>\n  )\n}\n","import './App.css';\nimport { Clock } from './components/Clock'\nimport { Footer } from './components/Footer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Clock />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}